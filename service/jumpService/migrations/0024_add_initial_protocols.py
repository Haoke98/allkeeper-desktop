# Generated by Django 4.2.20 on 2025-04-15 01:54

from django.db import migrations
from simplepro.lib import pkHelper


def add_initial_protocols(apps, schema_editor):
    Protocol = apps.get_model('jumpService', 'Protocol')
    protocols = [
        {
            'name': 'http',
            'default_port': 80,
            'is_web_protocol': True,
            'description': 'HTTP协议'
        },
        {
            'name': 'https',
            'default_port': 443,
            'is_web_protocol': True,
            'description': 'HTTPS安全协议'
        },
        {
            'name': 'ssh',
            'default_port': 22,
            'is_web_protocol': False,
            'description': 'SSH远程连接协议'
        },
        {
            'name': 'mysql',
            'default_port': 3306,
            'is_web_protocol': False,
            'description': 'MySQL数据库协议'
        },
        {
            'name': 'postgresql',
            'default_port': 5432,
            'is_web_protocol': False,
            'description': 'PostgreSQL数据库协议'
        },
        {
            'name': 'redis',
            'default_port': 6379,
            'is_web_protocol': False,
            'description': 'Redis数据库协议'
        },
        {
            'name': 'mongodb',
            'default_port': 27017,
            'is_web_protocol': False,
            'description': 'MongoDB数据库协议'
        },
        {
            'name': 'elasticsearch',
            'default_port': 9200,
            'is_web_protocol': True,
            'description': 'Elasticsearch搜索引擎协议'
        },
        {
            'name': 'kibana',
            'default_port': 5601,
            'is_web_protocol': True,
            'description': 'Kibana可视化平台'
        },
        {
            'name': 'rabbitmq',
            'default_port': 5672,
            'is_web_protocol': False,
            'description': 'RabbitMQ消息队列协议'
        },
        {
            'name': 'rabbitmq-management',
            'default_port': 15672,
            'is_web_protocol': True,
            'description': 'RabbitMQ管理界面'
        }
    ]

    for protocol_data in protocols:
        protocol = Protocol(
            id=pkHelper.uuid_generator(),
            **protocol_data
        )
        protocol.save()


def remove_initial_protocols(apps, schema_editor):
    Protocol = apps.get_model('jumpService', 'Protocol')
    Protocol.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('jumpService', '0023_protocol_remove_serviceurl_url_serviceurl_host_and_more'),
    ]

    operations = [
        migrations.RunPython(add_initial_protocols, remove_initial_protocols),
    ]
